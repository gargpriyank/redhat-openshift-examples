kind: Template
apiVersion: v1
metadata:
  name: java-spring-mongodb-kafka
  annotations:
    openshift.io/display-name: Java Spring MongoDB Kafka Template
    description: Start building your next Java Spring application on OpenShift.
    tags: java,ibm
    iconClass: icon-java
    openshift.io/long-description: The example application at https://github.com/gargpriyank/java-spring-mongodb-kafka-example
      creates a microservice component and connects to IBM Databases for MongoDB and IBM Event Stream (Kafka).
    openshift.io/provider-display-name: IBM
    openshift.io/documentation-url: https://github.com/gargpriyank/java-spring-mongodb-kafka-example/blob/master/README.md
    openshift.io/support-url: https://www.ibm.com/cloud/support
message: A Java application is being deployed. To view your deployment navigate to your project.
labels:
  template: java-spring-mongodb-kafka
  app: java-spring-mongodb-kafka
objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${NAME}"
      annotations:
        description: Exposes and load balances the application pods
    spec:
      ports:
        - name: web
          port: 8080
          targetPort: 8080
      selector:
        name: "${NAME}"
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${NAME}"
    spec:
      to:
        kind: Service
        name: "${NAME}"
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: "${NAME}"
      annotations:
        description: Keeps track of changes in the application image
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: "${NAME}"
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: 'true'
    spec:
      source:
        type: Git
        git:
          uri: "${GITHUB_REPO}"
          ref: "${BRANCH}"
      strategy:
        type: Source
        dockerStrategy:
          dockerfilePath: Dockerfile
      output:
        to:
          kind: ImageStreamTag
          name: "${NAME}:latest"
      triggers:
        - type: ImageChange
        - type: ConfigChange
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${NAME}"
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: 'true'
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${NAME}"
            from:
              kind: ImageStreamTag
              name: "${NAME}:latest"
        - type: ConfigChange
      replicas: "${{REPLICAS}}"
      selector:
        name: "${NAME}"
      template:
        metadata:
          name: "${NAME}"
          labels:
            name: "${NAME}"
        spec:
          containers:
            - name: "${NAME}"
              image: "${NAME}"
              ports:
                - containerPort: 8080
              readinessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 3
                httpGet:
                  path: "/"
                  port: 8080
              livenessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 30
                httpGet:
                  path: "/"
                  port: 8080
              resources:
                limits:
                  memory: "${MEMORY_LIMIT}"
              env:
                - name: JVM_OPTS
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-secret"
                      key: jvm-secret
                - name: MONGO_DB_URL
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-secret"
                      key: mongo-db-url
                - name: MONGO_DB_NAME
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-secret"
                      key: mongo-db-name
                - name: ES_KAFKA_SERVICE
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-secret"
                      key: es_kafka_service_name
                - name: ES_KAFKA_TOPIC_NAME
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-secret"
                      key: es_kafka_topic_name
              volumeMounts:
                - name: keystore-cert
                  mountPath: /etc/keystore/cert/
                  readOnly: true
          volumes:
            - name: keystore-cert
              secret:
                secretName: "${NAME}-keystore-cert-secret"
parameters:
  - name: NAME
    displayName: Name
    description: The name for application and associated objects. Lowercase letters,
      numbers, and '-' only.
    required: true
    value: java-spring-mongodb-kafka
    from: "[a-z0-9-]{40}"
  - name: GITHUB_REPO
    displayName: GitHub Repository
    description: Source code for OpenShift to build and deploy. Using the default value
      will deploy out of the box. To make changes, fork the template repository and
      paste that here instead.
    required: true
    value: https://github.com/gargpriyank/java-spring-mongodb-kafka-example.git
  - name: BRANCH
    displayName: Branch Name
    description: GitHub repo branch name, default is 'master'
    required: true
    value: master
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use. Using the default value
      should work out of the box. You can modify this if you want to limit or extend
      the memory further.
    required: true
    value: 512Mi
  - name: REPLICAS
    displayName: REPLICAS
    description: Number of active application pods.
    required: true
    value: "2"